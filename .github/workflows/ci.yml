name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test Database Schema
  test-database:
    name: Test Database Schema
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: aithlete_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test database schema
      run: |
        # Test that schema files are valid SQL
        docker run --rm --network host -v $(pwd)/database/schema:/sql postgres:15 \
          psql -h localhost -U test_user -d aithlete_test -f /sql/00_initial_schema.sql
        
        # Test seed data
        docker run --rm --network host -v $(pwd)/database/schema:/sql postgres:15 \
          psql -h localhost -U test_user -d aithlete_test -f /sql/01_seed_data.sql

    - name: Verify schema structure
      run: |
        # Verify key tables exist
        docker run --rm --network host postgres:15 \
          psql -h localhost -U test_user -d aithlete_test -c "
            SELECT tablename FROM pg_tables WHERE schemaname = 'public' ORDER BY tablename;
            SELECT COUNT(*) as goal_templates FROM goal_templates;
            SELECT version FROM schema_migrations ORDER BY applied_at;
          "

  # Test Kotlin Services
  test-kotlin-services:
    name: Test Kotlin Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, data-aggregation-service, email-service, cli-interface]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Test ${{ matrix.service }}
      run: |
        if [ -d "services/${{ matrix.service }}" ]; then
          cd services/${{ matrix.service }}
          ./gradlew test --no-daemon
          ./gradlew build --no-daemon
        else
          echo "Service ${{ matrix.service }} not found, skipping"
        fi

  # Test Python Services
  test-python-services:
    name: Test Python Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [garmin-service, hevy-service, ai-planning-service]
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Test ${{ matrix.service }}
      run: |
        if [ -d "services/${{ matrix.service }}" ]; then
          cd services/${{ matrix.service }}
          
          # Install dependencies
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          if [ -f "requirements-dev.txt" ]; then
            pip install -r requirements-dev.txt
          fi
          
          # Run tests
          if [ -f "pytest.ini" ] || [ -d "tests" ]; then
            python -m pytest
          fi
          
          # Run linting
          if [ -f ".flake8" ] || grep -q "flake8" requirements*.txt; then
            python -m flake8
          fi
          
          # Type checking
          if grep -q "mypy" requirements*.txt; then
            python -m mypy .
          fi
        else
          echo "Service ${{ matrix.service }} not found, skipping"
        fi

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-database, test-kotlin-services, test-python-services]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file for testing
      run: |
        cp .env.example .env
        # Override with test values
        echo "DATABASE_PASSWORD=test_password" >> .env
        echo "OPENAI_API_KEY=test_key" >> .env
        echo "JWT_SECRET=test_jwt_secret_for_ci" >> .env

    - name: Run integration tests
      run: |
        # Start core services for integration testing
        docker-compose up -d postgres redis
        
        # Wait for services to be ready
        sleep 30
        
        # Run basic connectivity tests
        docker-compose exec -T postgres pg_isready -U aithlete_user -d aithlete
        
        # Test Redis
        docker-compose exec -T redis redis-cli ping

    - name: Cleanup
      run: docker-compose down -v

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-kotlin-services, test-python-services]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: 
          - api-gateway
          - user-service
          - data-aggregation-service
          - garmin-service
          - hevy-service
          - ai-planning-service
          - email-service
          - cli-interface
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      if: ${{ hashFiles(format('services/{0}/Dockerfile', matrix.service)) != '' }}
      with:
        context: ./services/${{ matrix.service }}
        file: ./services/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, build-images]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        # Placeholder for deployment logic
        echo "Deploying to staging environment..."
        echo "This would typically involve:"
        echo "- Updating docker-compose.prod.yml with new image tags"
        echo "- SSHing to staging server"
        echo "- Running docker-compose pull && docker-compose up -d"
        echo "- Running health checks"
        echo "- Notifying team of deployment"

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment..."
        # Add actual smoke tests here