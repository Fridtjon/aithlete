-- AIthlete Database Schema
-- Initial schema for all microservices

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table - Core user profiles
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE,
    timezone VARCHAR(50) DEFAULT 'UTC',
    preferences JSONB DEFAULT '{}',
    
    -- User profile information
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    date_of_birth DATE,
    height_cm INTEGER,
    gender VARCHAR(20),
    
    -- Indexes
    CONSTRAINT users_email_check CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_active ON users(is_active);

-- User authentication and credentials
CREATE TABLE user_credentials (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    service VARCHAR(50) NOT NULL, -- 'garmin', 'hevy', 'email_smtp'
    credential_type VARCHAR(50) NOT NULL, -- 'oauth_token', 'api_key', 'username_password'
    encrypted_data BYTEA NOT NULL, -- Encrypted credential data
    salt BYTEA NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE,
    
    UNIQUE(user_id, service)
);

CREATE INDEX idx_user_credentials_user_service ON user_credentials(user_id, service);

-- Goal templates and definitions
CREATE TABLE goal_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    category VARCHAR(50) NOT NULL, -- 'weight_loss', 'muscle_gain', 'endurance', 'general_fitness'
    description TEXT,
    default_parameters JSONB NOT NULL DEFAULT '{}',
    metrics_tracked JSONB NOT NULL DEFAULT '[]', -- Array of metric names to track
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT TRUE
);

CREATE INDEX idx_goal_templates_category ON goal_templates(category);

-- User-specific goals
CREATE TABLE user_goals (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    template_id UUID REFERENCES goal_templates(id),
    name VARCHAR(200) NOT NULL,
    description TEXT,
    category VARCHAR(50) NOT NULL,
    parameters JSONB NOT NULL DEFAULT '{}', -- Goal-specific parameters (target weight, timeline, etc.)
    target_metrics JSONB NOT NULL DEFAULT '{}',
    start_date DATE NOT NULL,
    target_date DATE,
    status VARCHAR(20) DEFAULT 'active', -- 'active', 'paused', 'completed', 'cancelled'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_user_goals_user_id ON user_goals(user_id);
CREATE INDEX idx_user_goals_status ON user_goals(status);
CREATE INDEX idx_user_goals_dates ON user_goals(start_date, target_date);

-- Fitness plans generated by AI
CREATE TABLE fitness_plans (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    goal_id UUID REFERENCES user_goals(id) ON DELETE SET NULL,
    version INTEGER NOT NULL DEFAULT 1,
    plan_type VARCHAR(50) NOT NULL, -- 'daily', 'weekly', 'monthly'
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    plan_data JSONB NOT NULL, -- Complete plan structure
    generated_by VARCHAR(100), -- AI model/version used
    generation_context JSONB DEFAULT '{}', -- Context data used for generation
    status VARCHAR(20) DEFAULT 'active', -- 'active', 'completed', 'superseded'
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(user_id, plan_type, start_date, version)
);

CREATE INDEX idx_fitness_plans_user_dates ON fitness_plans(user_id, start_date, end_date);
CREATE INDEX idx_fitness_plans_goal ON fitness_plans(goal_id);
CREATE INDEX idx_fitness_plans_status ON fitness_plans(status);

-- Plan feedback for AI improvement
CREATE TABLE plan_feedback (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    plan_id UUID NOT NULL REFERENCES fitness_plans(id) ON DELETE CASCADE,
    feedback_type VARCHAR(50) NOT NULL, -- 'rating', 'completion', 'modification', 'comment'
    feedback_data JSONB NOT NULL,
    submitted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_plan_feedback_plan ON plan_feedback(plan_id);
CREATE INDEX idx_plan_feedback_user ON plan_feedback(user_id);

-- Garmin raw data storage
CREATE TABLE garmin_activities (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    activity_id VARCHAR(100) NOT NULL, -- Garmin's activity ID
    activity_type VARCHAR(100),
    activity_name VARCHAR(200),
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    duration_seconds INTEGER,
    distance_meters NUMERIC(10,2),
    calories INTEGER,
    avg_heart_rate INTEGER,
    max_heart_rate INTEGER,
    raw_data JSONB, -- Complete Garmin activity data
    processed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(user_id, activity_id)
);

CREATE INDEX idx_garmin_activities_user_time ON garmin_activities(user_id, start_time);
CREATE INDEX idx_garmin_activities_type ON garmin_activities(activity_type);

-- Garmin health metrics (heart rate, sleep, weight, etc.)
CREATE TABLE garmin_health_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    metric_type VARCHAR(50) NOT NULL, -- 'heart_rate', 'sleep', 'weight', 'stress', 'body_battery'
    recorded_date DATE NOT NULL,
    metric_data JSONB NOT NULL,
    processed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(user_id, metric_type, recorded_date)
);

CREATE INDEX idx_garmin_health_user_type_date ON garmin_health_metrics(user_id, metric_type, recorded_date);

-- Hevy workout data
CREATE TABLE hevy_workouts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    workout_id VARCHAR(100) NOT NULL, -- Hevy's workout ID
    workout_title VARCHAR(200),
    start_time TIMESTAMP WITH TIME ZONE NOT NULL,
    end_time TIMESTAMP WITH TIME ZONE,
    duration_seconds INTEGER,
    notes TEXT,
    raw_data JSONB, -- Complete Hevy workout data
    processed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(user_id, workout_id)
);

CREATE INDEX idx_hevy_workouts_user_time ON hevy_workouts(user_id, start_time);

-- Hevy exercises within workouts
CREATE TABLE hevy_exercises (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    workout_id UUID NOT NULL REFERENCES hevy_workouts(id) ON DELETE CASCADE,
    exercise_name VARCHAR(200) NOT NULL,
    exercise_notes TEXT,
    sets_data JSONB NOT NULL, -- Array of sets with weight, reps, etc.
    exercise_order INTEGER
);

CREATE INDEX idx_hevy_exercises_workout ON hevy_exercises(workout_id);

-- Normalized/aggregated metrics across all data sources
CREATE TABLE aggregated_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    metric_type VARCHAR(100) NOT NULL, -- 'daily_activity', 'weekly_training_load', 'recovery_score'
    metric_date DATE NOT NULL,
    metric_value NUMERIC(15,4),
    metric_data JSONB,
    source_services TEXT[], -- Array of services that contributed to this metric
    calculated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    
    UNIQUE(user_id, metric_type, metric_date)
);

CREATE INDEX idx_aggregated_metrics_user_type_date ON aggregated_metrics(user_id, metric_type, metric_date);

-- Email digest tracking
CREATE TABLE email_digests (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    digest_type VARCHAR(50) NOT NULL, -- 'daily', 'weekly'
    digest_date DATE NOT NULL,
    plan_id UUID REFERENCES fitness_plans(id),
    sent_at TIMESTAMP WITH TIME ZONE,
    delivery_status VARCHAR(50) DEFAULT 'pending', -- 'pending', 'sent', 'failed', 'bounced'
    error_message TEXT,
    email_content JSONB, -- Template data used for email
    
    UNIQUE(user_id, digest_type, digest_date)
);

CREATE INDEX idx_email_digests_user_date ON email_digests(user_id, digest_date);
CREATE INDEX idx_email_digests_status ON email_digests(delivery_status);

-- Service health and monitoring
CREATE TABLE service_health (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    service_name VARCHAR(100) NOT NULL,
    health_check_type VARCHAR(50) NOT NULL, -- 'api_availability', 'database_connection', 'external_api'
    status VARCHAR(20) NOT NULL, -- 'healthy', 'degraded', 'unhealthy'
    response_time_ms INTEGER,
    error_message TEXT,
    checked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

CREATE INDEX idx_service_health_service_time ON service_health(service_name, checked_at);
CREATE INDEX idx_service_health_status ON service_health(status);

-- Database schema version tracking
CREATE TABLE schema_migrations (
    version VARCHAR(50) PRIMARY KEY,
    description TEXT,
    applied_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert initial schema version
INSERT INTO schema_migrations (version, description) 
VALUES ('00_initial_schema', 'Initial database schema with all core tables');

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply updated_at triggers to relevant tables
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_credentials_updated_at BEFORE UPDATE ON user_credentials 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_goals_updated_at BEFORE UPDATE ON user_goals 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();